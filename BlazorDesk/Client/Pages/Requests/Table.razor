@page "/requests"
@using BlazorDesk.AppModels.View
@using BlazorDesk.AppModels
@using Microsoft.JSInterop
@inject HttpClient Http

<h2 class="text-center">Requests</h2>


@if (requests == null)
{
    <LoadingSpinner />
}
else
{

            <ul class="nav nav-justified">
                <li class="nav-item">
                    <a class="btn btn-success" onClick={this.showModal}>Add Note</a>
                </li>
                <li class="nav-item">
                    <a class="btn btn-success" onClick={this.mergeRequests} id="mergeReq">Merge</a>
                </li>
                <li class="nav-item">

                    <a class="btn btn-danger" onClick={this.deleteRequests}>Delete</a>
                </li>



                <!-- @*@{
                        if (Model.CurrentFilter != null)
                        {
                            <input style="display:none" name="currentFilter" value="@Model.CurrentFilter" />
                        }
                        if (Model.CurrentSearch != null)
                        {
                            <input style="display:none" name="searchString" value="@Model.CurrentSearch" />
                        }
                        if (Model.CurrentSort != null)
                        {
                            <input style="display:none" name="sortOrder" value="@Model.CurrentSort" />
                        }
                    }*@ -->
                <li class="nav-item">

                    <select name="requestsPerPage" class="form-control">

                        <option>25</option>
                        <option>50</option>
                        <option>75</option>
                        <option>100</option>
                    </select>
                </li>
            </ul>

    <th>
        <!-- @*  @Html.PagedListPager(Model.Requests, page => Url.Action("Index", "Requests", new { sortOrder, searchString, currentFilter, page, requestsPerPage }))*@ -->
    </th>
    <table class="table table-hover table-striped table-bordered">
        <thead>
            <tr>
                <th class="text-center"><input type="checkbox" class="checkbox-inline" id="checkAll"></th>
                <th></th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("Id"))>Id</button>
                </th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("Subject"))>Subject</button>
                </th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("Requester"))>Requester</button>
                </th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("AssignedTo"))>Assigned To</button>
                </th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("StartTime"))>Start time</button>
                </th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("EndTime"))>End time</button>
                </th>
                <th>
                    <button class="btn btn-success" @onclick=@(async () => await Sort("Status"))>Status</button>
                    <a id="searchIcon"><i class="glyphicon glyphicon-zoom-in pull-right"></i></a>
                </th>
            </tr>
            <tr id="searchBar">
                <td>Search</td>
                <td></td>
                <td>
                    <input class="text-center form-control" type="text" placeholder="Id" id="IdSearch" @oninput="@(async (args) => await requestFilteringList(args.Value.ToString(), "Id"))"/>
                </td>
                <td>
                    <input class="text-center form-control" type="text" placeholder="Subject" id="SubjectSearch" @oninput="@(async (args) => await requestFilteringList(args.Value.ToString(), "Subject"))" />
                </td>
                <td>
                    <input class="text-center form-control" type="text" placeholder="Requester Name" id="RequesterSearch" @oninput="@(async (args) => await requestFilteringList(args.Value.ToString(), "Requester"))"/>
                </td>
                <td>
                    <input class="text-center form-control" type="text" placeholder="Assigned To" id="AssignedToSearch" @oninput="@(async (args) => await requestFilteringList(args.Value.ToString(), "AssignedTo"))" />
                </td>
                <td>
                    <input class="text-center form-control" type="text" placeholder="MM/DD/YYYY" id="StartTimeSearch" @oninput="@(async (args) => await requestFilteringList(args.Value.ToString(), "SartTime"))"/>
                </td>
                <td>
                    <input class="text-center form-control" type="text" placeholder="MM/DD/YYYY" id="EndTimeSearch" @oninput="@(async (args) => await requestFilteringList(args.Value.ToString(), "EndTime"))" />
                </td>
                <td>
                    <select name='currentFilter' onchange='ChangeStatus' class="form-control">
                        <option value="">All Requests</option>
                        @*@{
                foreach (var status in Model.Statuses)
                {
                    if (Model.CurrentFilter == status.Value)
                    {
                        <option selected="selected" value="@status.Value">@status.Text</option>
                    }
                    else
                    {
                        <option value="@status.Value">@status.Text</option>
                    }

                }
            }*@
                    </select>
                </td>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in requests)
            {
                var notesModalId = item.Id + "Notes";
                <tr>
                    @{
                        string noteColor = item.Id % 2 == 0 ? "orange" : "wheat";
                    }
                    <td class="text-center"><input value="@item.Id" type="checkbox" class="check"></td>
                    <td class="text-center"><a class="glyphicon glyphicon-file" name="noteIcon" style="color:@noteColor" data-toggle="modal" data-target="#@notesModalId"></a></td>
                    <td>
                        @item.Id
                    </td>
                    <td>
                        <a href="/requests/details/@item.Id"><strong>@item.Subject</strong></a>
                    </td>
                    <td>
                        @item.Requester
                    </td>
                    <td>
                        @if (item.AssignedTo != null)
                        {
                            <a class="text-success"><strong>@item.AssignedTo</strong></a>
                        }
                        else
                        {
                            <label class="text-danger">Unassigned</label>
                        }
                    </td>
                    <td>
                        @item.StartTime.ToShortDateString()
                    </td>
                    <td>
                        @item.Endtime
                    </td>
                    <td>
                        @item.Status
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div style="display:inline">
        <label for="timer">
            <p>
                Seconds until page reloads: <span class="text-danger" id="timer">
                </span>
            </p>
        </label>
    </div>
}

@code {
    IEnumerable<RequestListingViewModel> requests;

    bool ShowSearch = false;

    TableFilteringModel model = new TableFilteringModel();

    public string LastSortColumn { get; set; }

    public bool OrderByDescending { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
    }

    protected async Task ChangeStatus(int statusId)
    {

        requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
    }

}

@functions {
    protected async Task Sort(string SortColumn)
    {
        Console.WriteLine(SortColumn);
        requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
        if (SortColumn == LastSortColumn)
        {
            OrderByDescending = !OrderByDescending;
        }
        else
        {
            OrderByDescending = false;
        }

        switch (SortColumn)
        {
            case "Id":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.Id).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.Id).ToArray();
                }
                break;
            case "Subject":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.Subject.ToLower()).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.Subject.ToLower()).ToArray();
                }
                break;
            case "Requester":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.Requester).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.Requester).ToArray();
                }
                break;
            case "AssignedTo":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.AssignedTo).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.AssignedTo).ToArray();
                }
                break;
            case "StartTime":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.StartTime).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.StartTime).ToArray();
                }
                break;
            case "EndTime":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.Endtime).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.Endtime).ToArray();
                }
                break;
            case "Status":
                if (OrderByDescending)
                {
                    requests = requests.OrderByDescending(r => r.Status).ToArray();
                }
                else
                {
                    requests = requests.OrderBy(r => r.Status).ToArray();
                }
                break;
            default:
                break;
        }

        LastSortColumn = SortColumn;
    }

    // Filtering
    protected async Task requestFilteringList(string Value, string columnName)
    {
        requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");

        Console.WriteLine(Value);
        Console.WriteLine(columnName);

        if (Value.Trim().Length > 0)
        {
            switch (columnName)
            {
                case "Id":
                    if (!int.TryParse(Value, out int id))
                    {
                        break;
                    }
                    requests = requests.Where(r => r.Id == id).ToArray();
                    break;
                case "Subject":
                    requests = requests.Where(r => r.Subject.Contains(Value)).ToArray();
                    break;
                case "Requester":
                    requests = requests.Where(r => r.Requester.Contains(Value)).ToArray();
                    break;
                case "AssignedTo":
                    requests = requests.Where(r => r.AssignedTo.Contains(Value)).ToArray();
                    break;
                case "StartTime":
                    requests = requests.Where(r => r.StartTime.ToShortDateString() == Value).ToArray();
                    break;
                case "EndTime":
                    requests = requests.Where(r => r.Endtime.Value.ToShortDateString() == Value).ToArray();
                    break;
                default:
                    requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
                    break;
            }
        }
        else
        {
            requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
        }
    }
}
