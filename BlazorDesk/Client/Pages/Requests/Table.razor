@page "/requests"
@using BlazorDesk.AppModels.View
@inject HttpClient Http

<h2 class="text-center">Requests</h2>


@if (requests == null)
{
    <LoadingSpinner />
}
else
{
    <form>
        <div class="card-header">
            <ul class="nav nav-pills nav-justified">
                <li class="nav-item">
                    <select name='currentFilter' onchange='ChangeStatus' class="form-control">
                        <option value="">All Requests</option>
                        @*@{
                                foreach (var status in Model.Statuses)
                                {
                                    if (Model.CurrentFilter == status.Value)
                                    {
                                        <option selected="selected" value="@status.Value">@status.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@status.Value">@status.Text</option>
                                    }

                                }
                            }*@
                    </select>
                </li>


                <li class="nav-item">
                    <a class="btn btn-success text-center" to="/Requests/Create">New</a>
                </li>
                <li class="nav-item">
                    <a class="btn btn-warning" onClick={this.showModal}>Add Note</a>
                </li>
                <li class="nav-item">

                    <a class="btn btn-warning" onClick={this.mergeRequests} id="mergeReq">Merge</a>
                </li>
                <li class="nav-item">

                    <a class="btn btn-danger" onClick={this.deleteRequests}>Delete</a>
                </li>



                <!-- @*@{
                        if (Model.CurrentFilter != null)
                        {
                            <input style="display:none" name="currentFilter" value="@Model.CurrentFilter" />
                        }
                        if (Model.CurrentSearch != null)
                        {
                            <input style="display:none" name="searchString" value="@Model.CurrentSearch" />
                        }
                        if (Model.CurrentSort != null)
                        {
                            <input style="display:none" name="sortOrder" value="@Model.CurrentSort" />
                        }
                    }*@ -->
                <li class="nav-item">

                    <select name="requestsPerPage" onchange='this.form.submit()' class="form-control">

                        @*@foreach (var option in Model.ReqPerPageList)
                            {
                                if (Model.RequestsPerPage == int.Parse(option.Value))
                                {
                                    <option selected="selected" value="@option.Value">@option.Text</option>
                                }
                                else
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }*@
                    </select>
                </li>
                </ul>
        </div>
    </form>


    <th>
        <!-- @*  @Html.PagedListPager(Model.Requests, page => Url.Action("Index", "Requests", new { sortOrder, searchString, currentFilter, page, requestsPerPage }))*@ -->
    </th>
    <table class="table table-hover table-striped table-bordered">
        <thead>
            <tr>
                <th class="text-center"><input type="checkbox" class="checkbox-inline" id="checkAll"></th>
                <th></th>
                <th>
                    <a href="#" onclick="alert('Ordered by id')">Id</a>
                </th>
                <th>
                    <a href="/">Subject</a>
                </th>
                <th>
                    <a href="/">Requester</a>
                </th>
                <th>
                    <a href="/">Assigned to</a>
                </th>
                <th>
                    <a href="/">Start time</a>
                </th>
                <th>
                    <a href="/">End time</a>
                </th>
                <th>
                    <a>Status</a>
                    <a id="searchIcon"><i class="glyphicon glyphicon-zoom-in pull-right"></i></a>
                </th>
            </tr>
        </thead>

        <tbody>
            @if (ShowSearch)
            {
                <tr id="searchBar">
                    <td></td>
                    <td></td>
                    <input hidden name="currentFilter" value="Model.CurrentFilter" />
                    <td>
                        <input form="searchForm" class="text-right center-block" type="text" placeholder="Id" name="IdSearch" value="Model.CurrentSearch.IdSearch" />
                    </td>
                    <td>
                        <input form="searchForm" class="text-right center-block " type="text" placeholder="Subject" name="SubjectSearch" value="Model.CurrentSearch.SubjectSearch" />
                    </td>
                    <td>
                        <input form="searchForm" class="text-right center-block" type="text" placeholder="Requester Name" name="RequesterSearch" value="Model.CurrentSearch.RequesterSearch" />
                    </td>
                    <td>
                        <input form="searchForm" class="text-right center-block" type="text" placeholder="Assigned To" name="AssignedToSearch" value="Model.CurrentSearch.AssignedToSearch" />
                    </td>
                    <td>
                        <input form="searchForm" class="text-right center-block" type="text" placeholder="MM/DD/YYYY" name="CreationDateSearch" value="Model.CurrentSearch.CreationDateSearch" />
                    </td>
                    <td>
                        <input form="searchForm" class="text-right center-block" type="text" placeholder="MM/DD/YYYY" name="ClosingDateSearch" value="Model.CurrentSearch.ClosingDateSearch" />
                    </td>
                    <td>
                        <button type="submit" class="btn btn-success center-block">Search</button>
                    </td>
                </tr>
            }


            @foreach (var item in requests)
            {
                var notesModalId = item.Id + "Notes";
                <tr>
                    @{
                        string noteColor = item.Id % 2 == 0 ? "orange" : "wheat";
                    }
                    <td class="text-center"><input value="@item.Id" type="checkbox" class="check"></td>
                    <td class="text-center"><a class="glyphicon glyphicon-file" name="noteIcon" style="color:@noteColor" data-toggle="modal" data-target="#@notesModalId"></a></td>
                    <td>
                        @item.Id
                    </td>
                    <td>
                        <a href="/requests/details/@item.Id">@item.Subject</a>
                    </td>
                    <td>
                        requester
                    </td>
                    <td>
                        @if (item.AssignedTo != null)
                        {
                            <a class="text-success"><strong>@item.AssignedTo</strong></a>
                        }
                        else
                        {
                            <label class="text-danger">Unassigned</label>
                        }
                    </td>
                    <td>
                        @item.StartTime;
                    </td>
                    <td>
                        @item.Endtime;
                    </td>
                    <td>
                        @item.Status
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div style="display:inline">
        <label for="timer">
            <p>
                Seconds until page reloads: <span class="text-danger" id="timer">
                </span>
            </p>
        </label>
    </div>
}

@code {
    IEnumerable<RequestListingViewModel> requests;

    bool ShowSearch = false;

    protected override async Task OnInitializedAsync()
    {
        requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
    }

    protected async Task ChangeStatus(int statusId)
    {

        requests = await Http.GetJsonAsync<IEnumerable<RequestListingViewModel>>("api/Requests");
    }

}
